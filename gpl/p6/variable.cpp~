#include "variable.h"
#include "expression.h"
#include <assert.h>     /* assert */


Variable::Variable(string m_id1, Symbol* symb, Expression* expres)
{
	int index = expres->eval_int();
	m_id = m_id1;
	sym = symb;
	exp = expres;
	game = symb->get_game_object_value(index);


	game->get_member_variable_type(m_id1,m_type);
	
}
Animation_block* Variable::get_animation_block()
{
	return sym->get_animation_block_value();
}
Variable::Variable(string m_id1, Symbol* symb)
{

	sym = symb;
	m_type = symb->get_type();
	exp = NULL;
	game = symb->get_game_object_value();
	m_id = m_id1;
	assert(game != NULL);
	Gpl_type type;
	game->get_member_variable_type(m_id,type);
	//cout << m_type;
	//m_type = STRING;
	m_type = type;
}
Variable::Variable(Symbol* symb)
{
	//does not hold an expression ex: int y = (i + x)
	exp = NULL;
	m_id = "";
	sym = symb;
	m_type = sym->get_type();
	assert(symb != NULL);
}
Variable::Variable(Symbol* symb, Expression *expp)
{
	m_id = "";
	//does not hold a single var ex: int x = i;
	sym = symb;
	exp = expp;
	m_type = expp->get_type();
	assert(exp != NULL);
}
int Variable::get_int_value()
{//stuck here
	//assert((exp != NULL && sym != NULL));
	
	if(sym)
	{
		if(m_id != "")
		{	
			//assert(false);
			int value;
			game->get_member_variable(m_id, value);
			return value;
		}
		else
		{
			return sym->get_int_value();
		}//return 0;
	}
	else if (exp)//only called when this is an expression int x = a[5 + y]
	{
		//
		//int result = exp->eval_int();
		return sym->get_int_value(exp->eval_int());
		
	}
	return 0;
}
double Variable::get_double_value()
{
	if(sym)
	{
		if(m_id != "")
		{	
			//assert(false);
			double value;
			game->get_member_variable(m_id, value);
			return value;
		}
		else{
		return sym->get_double_value();
		}
	}
	else if (exp)//only called when this is an expression int x = a[5 + y]
	{
		//
		//int result = exp->eval_int();
		return sym->get_double_value(exp->eval_int());
		
	}
	else return 0.0;
}
string Variable::get_string_value()
{
	if(sym)
	{
		if(m_id != "")
		{	
			//assert(false);
			string value;
			game->get_member_variable(m_id, value);
			return value;
		}
		else{
		return sym->get_string_value();
		}

	}
	else if (exp)//only called when this is an expression int x = a[5 + y]
	{
		//
		//int result = exp->eval_int();
		return sym->get_string_value(exp->eval_int());
		
	}
	else return "";
}
Gpl_type Variable::get_type()
{
	return m_type;
}













